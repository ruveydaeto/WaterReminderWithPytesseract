import { Injectable } from '@angular/core';
import { BehaviorSubject, interval } from 'rxjs';

@Injectable({
    providedIn: 'root'
})
export class ReminderService {
    private readonly GLASS_SIZE_ML = 200;
    private readonly TARGET_ML = 2000;
    private readonly REMINDER_INTERVAL_MS = 3600000; // 1SAAT       

    // STATE MANAGEMENT
    //su mikatarÄ±nÄ± tutalÄ±m ve baÅŸlangÄ±Ã§ deÄŸeri 0 olsun
    private waterAmountSubject = new BehaviorSubject<number>(0);
        //waterAmount$ ile su miktarÄ±nÄ± dinleyebilmke iÃ§in
    public waterAmount$ = this.waterAmountSubject.asObservable();


    //bir sonraki hatÄ±rlatma zamanÄ±nÄ± tutalÄ±m
    private nextReminderSubject = new BehaviorSubject<Date>(new Date());
    //nextReminder$ ile bir sonraki hatÄ±rlatmayÄ± dinlyebilmek iÃ§in
    public nextReminder$ = this.nextReminderSubject.asObservable();
    

    //reminder Ä± baÅŸlatalÄ±m

    // buranÄ±n react karÅŸÄ±lÄ±ÄŸÄ±:
    //useEffect(() => {
    //   startReminderTimer();
    // }, []); // [] = sadece bir kez Ã§alÄ±ÅŸ

    constructor() {
        this.startReminderTimer();
    }

    //bu reminder.service yazmamÄ±zÄ±n belli bir amacÄ± var; tÃ¼m stateleri burada tutabiliyorum.
    //bu sayede her componentte tekrar tekrar yazarak kod tekrarÄ± yapmÄ±yorum.
    // business logic ksÄ±mÄ±nÄ± burada yÃ¶netebilrim. Ã–rneÄŸin projenin amacÄ± dÃ¼ÅŸÃ¼nÃ¼ldÃ¼ÄŸÃ¼nde
    // ÅŸÃ¶yle bir olay sÄ±ralamasÄ± gerÃ§ekleÅŸecek: 
    //1. Su iÃ§ilecek. Peki su iÃ§ildiÄŸinde ne olacak?(drinkWater ile su iÃ§tiÄŸinde current amountuna glass_size_ml(newamount) ekleniyor)
    //Bizim bir hedef su ornaÄ±mÄ±z vardÄ±(2000ml) Target_ml yÃ¼zde kaÃ§Ä±nÄ±n iÃ§ildiÄŸini hesaplayarak kaÃ§ ml daha iÃ§memiz gerektiÄŸini
    //hesaplayabiliriz.
    //reminder ksÄ±mÄ±na geÃ§iyoruz burada ise heer 1 saatte bir uyarÄ± vermemiz alzÄ±m

//**Prensip: Separation of Concerns 

    drinkWater(): void {
     const currentAmount = this.waterAmountSubject.value;
     const newAmount = Math.min(currentAmount+ this.GLASS_SIZE_ML, this.TARGET_ML);
     this.waterAmountSubject.next(newAmount)

     this.setNextReminder();
    }

private startReminderTimer(): void {
    this.setNextReminder();

    interval(1000).subscribe(() => {
        const now = new Date();
        const nextReminder = this.nextReminderSubject.value;

        if( now>= nextReminder) {
            this.showReminder();
        this.setNextReminder();
        }
    })
}


private setNextReminder(): void {
    const nextTime = new Date();
    nextTime.setTime(nextTime.getTime() + this.REMINDER_INTERVAL_MS);
    this.nextReminderSubject.next(nextTime);
}

private showReminder(): void {
    if(this.waterAmountSubject.value < this.TARGET_ML) {
         alert('ðŸ’§ Su iÃ§me zamanÄ±! Bir bardak su iÃ§in.');
    }
}

  // YÃ¼zde hesapla
  getWaterPercentage(): number {
    return (this.waterAmountSubject.value / this.TARGET_ML) * 100;
  }

  // Getter'lar
  getCurrentAmount(): number {
    return this.waterAmountSubject.value;
  }

  getTarget(): number {
    return this.TARGET_ML;
  }

  getRemainingGlasses(): number {
    return Math.ceil((this.TARGET_ML - this.waterAmountSubject.value) / this.GLASS_SIZE_ML);
  }

}